// 宏定义--大写+下划线

// initial_address = 32'h0000_3000
`define INIT_ADDR 32'h0000_3000
`define EPC_ADDR  32'h0000_300c

// path
`define PATH_INSTR "./code.txt"   // path of instructions  //+
`define PATH_DATA "./data.txt"    // path of data

// size
`define SIZE_INSTR      2047     // size of instructions
`define SIZE_DATA       2047     // size of data
`define SIZE_ALUOP      3        // size of ALUOP  //*位数全改了 原来基础上前面加0
`define SIZE_ALUCTRLOUT 4        // size of AluCtrlOut
`define SIZE_EXCCODE 4//#

// //just for easy
// `define SIGNAL {RegDst, Jump, Branch, MemRead, MemtoReg, ALUOp, MemWrite, ALUSrc, RegWrite, ExtOp} /// // / /

//#
//EXCCODE
`define EXC_BREAK 5'b00001
`define EXC_SYSCALL 5'b00011
`define EXC_NOT 5'b00000
`define EXC_UNDEFINE 5'b11111

// op
`define OP_R     6'b000000
`define OP_ADDIU 6'b001001//*最后一位写反了？
`define OP_ADDI  6'b001000//*
`define OP_ANDI  6'b001100//*
`define OP_BEQ   6'b000100
`define OP_J     6'b000010
`define OP_LUI   6'b001111
`define OP_ORI   6'b001101
`define OP_XORI  6'b001110//*
`define OP_SLTI  6'b001010//*
`define OP_SLTIU 6'b001011//*
`define OP_JAL   6'b000011

//访存
`define OP_LB    6'b100000
`define OP_LBU   6'b100100
`define OP_LH    6'b100001
`define OP_LHU   6'b100101
`define OP_LW    6'b100011
`define OP_SB    6'b101000
`define OP_SH    6'b101001
`define OP_SW    6'b101011

//分支跳转
`define OP_BEQ   6'b000100
`define OP_BNE   6'b000101
`define OP_BGTZ  6'b000111
`define OP_BLEZ  6'b000110
`define OP_Branch_ELSE 6'b000001
// MFC0 MTC0指令
`define OP_CP0 6'b010000

`define rs_MF   5'b00000
`define rs_MT   5'b00100
//分支跳转OP_Branch_ELSE rt
`define rt_BGEZ 5'b00001
`define rt_BLTZ 5'b00000
`define rt_BGEZAL 5'b10001
`define rt_BLTZAL 5'b10000
//自定义Branch
`define NOT_Branch 4'b0000
`define BEQ    4'b0001
`define BNE    4'b0010
`define BGTZ   4'b0011
`define BLEZ   4'b0100
`define BGEZ   4'b0101
`define BLTZ   4'b0110
`define BGEZAL 4'b0111
`define BLTZAL 4'b1000

// funct
`define FUNCT_ADD 6'b100000
`define FUNCT_ADDU 6'b100001//*
`define FUNCT_AND 6'b100100
`define FUNCT_OR  6'b100101
`define FUNCT_SLT 6'b101010
`define FUNCT_SLTU 6'b101011//*
`define FUNCT_SUB 6'b100010
`define FUNCT_SUBU 6'b100011//*
`define FUNCT_XOR 6'b100110
`define FUNCT_NOR 6'b100111//*
// 移位指令
`define FUNCT_SLL  6'b000000
`define FUNCT_SLLV 6'b000100
`define FUNCT_SRL  6'b000010
`define FUNCT_SRLV 6'b000110
`define FUNCT_SRA  6'b000011
`define FUNCT_SRAV 6'b000111
// 分支指令
`define FUNCT_JR   6'b001000
`define FUNCT_JALR 6'b001001
//特权指令
`define FUNCT_ERET 6'b011000 
//自陷指令 #
`define FUNCT_SYSCALL 6'b001100
`define FUNCT_BREAK 6'b001101

// TODO: 重编码
//ALUOp -- generated by ALUCtrlOut last 3 digits
`define ALUOP_R         4'b0000  // defined by myself

`define ALUOP_ADD       4'b0010 
`define ALUOP_ADDU       4'b0010//*
`define ALUOP_ADDIU     4'b0010 
`define ALUOP_ADDI      4'b0010
`define ALUOP_LW        4'b0010
`define ALUOP_SW        4'b0010

`define ALUOP_SUB       4'b0110
`define ALUOP_SUBU       4'b0110//*
`define ALUOP_Branch       4'b0110

`define ALUOP_LUI       4'b0100

`define ALUOP_OR        4'b0001
`define ALUOP_ORI       4'b0001

`define ALUOP_J         4'b0111  // defined by myself

`define ALUOP_0         4'b0101  // defined by myself -- Flush instruction

`define ALUOP_ANDI         4'b0011//*

`define ALUOP_XORI         4'b1000//*
`define ALUOP_SLTI         4'b1001//*
`define ALUOP_SLTIU         4'b1010//*

// 分支
`define ALUOP_JR         4'b0000 // TODO: 重编码
`define ALUOP_JALR       4'b0000

// TODO: 重编码
//ALUCtrlOut
`define ALUCTRLOUT_ADD   5'b00010 
`define ALUCTRLOUT_ADDI  5'b00010 
`define ALUCTRLOUT_LW    5'b00010 
`define ALUCTRLOUT_SW    5'b00010 

`define ALUCTRLOUT_ADDU   5'b10010//*
`define ALUCTRLOUT_ADDIU 5'b10010 //

`define ALUCTRLOUT_SUB   5'b00110
`define ALUCTRLOUT_Branch   5'b00110 // 

`define ALUCTRLOUT_SUBU   5'b10110//*

`define ALUCTRLOUT_AND   5'b00000
`define ALUCTRLOUT_ANDI   5'b00000//*

`define ALUCTRLOUT_OR    5'b00001
`define ALUCTRLOUT_ORI   5'b00001 // same as ALUCTRLOUT_ADD

`define ALUCTRLOUT_XOR   5'b00011 // defined by myself
`define ALUCTRLOUT_XORI   5'b00011//*

`define ALUCTRLOUT_LUI   5'b00100 // defined by myself

`define ALUCTRLOUT_SLT   5'b00111
`define ALUCTRLOUT_SLTI   5'b00111//*

`define ALUCTRLOUT_SLTU   5'b01000//*
`define ALUCTRLOUT_SLTIU   5'b01000//*这个应该1000和0111都行，无符号扩展前边一定为0，即正数

`define ALUCTRLOUT_NOR   5'b00101//*

`define ALUCTRLOUT_SLL   5'b01110
`define ALUCTRLOUT_SLLV  5'b01001
`define ALUCTRLOUT_SRL   5'b01010
`define ALUCTRLOUT_SRLV  5'b01011
`define ALUCTRLOUT_SRA   5'b01100
`define ALUCTRLOUT_SRAV  5'b01101


